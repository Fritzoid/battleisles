{
    // Fix for CodeLLDB v1.11.0+ not showing Rust Vec contents in debugger
    // 
    // Problem: CodeLLDB v1.11.0+ stopped bundling Rust pretty printers and expects
    // them to load automatically from the Rust toolchain, but this often fails.
    // Symptoms: Vec<T> shows only "buf" and "len" instead of expandable elements
    // 
    // Solution: Manually load the Rust LLDB formatters using preRunCommands
    // - Uses dynamic path resolution via `rustc --print sysroot` for cross-platform compatibility
    // - Works on Linux, Windows, and macOS without hardcoded paths
    // 
    // Reference: https://github.com/vadimcn/codelldb/issues/1166
    "lldb.launch.preRunCommands": [
        "script import sys, os, subprocess; toolchain = subprocess.check_output(['rustc', '--print', 'sysroot']).decode().strip(); sys.path.append(os.path.join(toolchain, 'lib', 'rustlib', 'etc')); import lldb_lookup",
        "type synthetic add -l lldb_lookup.synthetic_lookup -x \"^(alloc::([a-z_]+::)+)Vec<.+>$\" --category Rust",
        "type summary add -F lldb_lookup.summary_lookup -e -x -h \"^(alloc::([a-z_]+::)+)Vec<.+>$\" --category Rust",
        "type category enable Rust"
    ]
}
